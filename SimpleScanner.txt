%option noyywrap

D [0-9]
A [a-zA-Z]
S [a-zA-Z0-9]

%{
#include "Tokens.h"

int tokenCount;
void yyerror(int tokenCount);
%}

%% 

"["     { tokenCount++; return(_LBRACK); }
"]"     { tokenCount++; return(_RBRACK); }
"("     { tokenCount++; return(_LPAREN); }
")"     { tokenCount++; return(_RPAREN); }
"+"     { tokenCount++; return(_PLUS); }
"*"     { tokenCount++; return(_MULT); }
"-"     { tokenCount++; return(_MINUS); }
"/"     { tokenCount++; return(_DIVIDE); }
":="    { tokenCount++; return(_ASSING); }
";"     { tokenCount++; return(_SEMI); }
":"     { tokenCount++; return(_COLON); }
","     { tokenCount++; return(_COMMA); }
"="     { tokenCount++; return(_EQL); }
"<"     { tokenCount++; return(_LESS); }
">"     { tokenCount++; return(_GTR); }
"<="    { tokenCount++; return(_LEQ); }
">="    { tokenCount++; return(_GEQ); }
"<>"    { tokenCount++; return(_NEQ); }

(p|P)(r|R)(o|O)(g|G)(r|R)(a|A)(m|M)     { tokenCount++; return(_PROGRAM); }
(e|E)(n|N)(d|D)(v|V)(a|A)(r|R)(s|S)    { tokenCount++; return(_ENDVARS); }
(e|E)(n|N)(d|D)(p|P)(r|R)(o|O)(c|C)(s|S) { tokenCount++; return(_ENDPROCS); }
(v|V)(a|A)(r|R)(i|I)(a|A)(b|B)(l|L)(e|E)(s|S) { tokenCount++; return(_VARS); }
(n|N)(o|O)(v|V)(a|A)(r|R)(i|I)(a|A)(b|B)(l|L)(e|E)(s|S) { tokenCount++; return(_NOVARS); }
(i|I)(n|N)(t|T)(e|E)(g|G)(e|E)(r|R) { tokenCount++; return(_INTEGER); }
(R|r)(E|e)(A|a)(L|l) { tokenCount++; return(_REAL); }
(s|S)(t|T)(r|R)(i|I)(n|N)(g|G) { tokenCount++; return(_STRING); }
(p|P)(R|r)(o|O)(c|C)(e|E)(d|D)(u|U)(r|R)(e|E)(S|s) { tokenCount++; return(_PROCS); }
(N|n)(o|O)(p|P)(R|r)(o|O)(c|C)(e|E)(d|D)(u|U)(r|R)(e|E)(s|S) { tokenCount++; return(_NOPROCS); }
(p|P)(R|r)(o|O)(c|C)(e|E)(d|D)(u|U)(r|R)(e|E) { tokenCount++; return(_PROC); }
(b|B)(e|E)(g|G)(I|i)(n|N) { tokenCount++; return(_BEGIN); }
(e|E)(n|N)(d|D) { tokenCount++; return(_END); }
(f|F)(o|O)(r|R) { tokenCount++; return(_FOR); }
(t|T)(o|O) { tokenCount++; return(_TO); }
(d|D)(o|O) { tokenCount++; return(_DO); }
(i|I)(f|F) { tokenCount++; return(_IF); }
(t|T)(h|H)(E|e)(n|N) { tokenCount++; return(_THEN); }
(e|E)(l|L)(s|S)(e|E) { tokenCount++; return(_ELSE); }
(r|R)(e|E)(a|A)(d|D) { tokenCount++; return(_READ); }
(w|W)(r|R)(i|I)(t|t)(e|E) { tokenCount++; return(_WRITE); }

[A-Za-z_][A-Za-z0-9_]+   { tokenCount++; return(_ID); }
"."{D}+|{D}+"."{D}+   { tokenCount++; return(_RCONST); }
{D}+    { tokenCount++; return(_ICONST); }
[+-]?{D}*\.{D}+([Ee][+-]?{D}+)? { tokenCount++; return(_ECONST); }
\{[^}]*\}    { tokenCount++; return(_COMENTARIO); }
\'[^'\n]*\'|\"[^"\n]*\"   { tokenCount++; return(_LITERAL); }
(" ")+ 		{return(_NULL) ; }
[\t\n\r]+ {/* para manejar el salto de linea */}

.	{yyerror(tokenCount);}

%%

void yyerror(int tokenCount)
{
	printf("Hubo un error al analizar el lexema %s en la columna %d", yytext, tokenCount);
	exit(1);
}

void yytrap() {}